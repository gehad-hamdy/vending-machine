openapi: 3.0.0

info:
  version: v0.1.0
  title: Vending Machine API

servers:
  - url: http://localhost:8890/api/v1
    description: Local development server

security:
  - OAuth2Local:
      - openid

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      description: The number of items to skip before starting to collect the result set.

    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 120
        default: 20
      description: The numbers of items to return.

    sortParam:
      in: query
      name: sort
      required: false
      schema:
        type: string
      description: The sort property, if the sort property starts with `<` it will sort ASC, or `>` it will sort DESC.

    filterParam:
      in: query
      name: filter
      required: false
      schema:
        type: string
      description: Filter results using RSQL queries.

  responses:
    Error:
      description: Error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Error:
      properties:
        code:
          type: string
          description: Error code if any.
        message:
          type: string
          description: General error message
        details:
          type: string
          description: Error details.
        violations:
          type: array
          items:
            $ref: '#/components/schemas/Violation'

    Violation:
      description: Violation in API request
      discriminator:
        propertyName: type
        mapping:
          ConstraintViolation: '#/components/schemas/ConstraintViolation'
      properties:
        type:
          description: Violation type
          type: string
        message:
          description: Violation message
          type: string

    ConstraintViolation:
      allOf:
        - $ref: '#/components/schemas/Violation'
        - type: object
          properties:
            property:
              type: string
              description: Property name

    Product:
      description: Product Item
      properties:
        id:
          type: integer
          format: int64
        cost:
          type: integer
          format: double
        amount_available:
          type: integer
        name:
          type: string

    ProductRequest:
      description: Product Item
      properties:
        cost:
          type: integer
          format: double
          minimum: 1
        amount_available:
          type: integer
        name:
          type: string
      required:
        - name
        - cost
        - amount_available

    User:
      description: user register
      properties:
        username:
          type: string
        password:
          type: string
        roleId:
          type: integer
          format: int64
      required:
        - username
        - password
        - role

    UserUpdate:
      description: user register
      properties:
        username:
          type: string
        password:
          type: string

    UserAuth:
      description: user register
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    UserDeposit:
      description: user deposit
      properties:
        deposit_value:
          type: integer
          enum: [5,10,20,50,100]
      required:
        - deposit_value

    ProductBuyRequest:
      description: user buy product
      properties:
        product_id:
          type: integer
          format: int64
        product_amount:
          type: integer
      required:
        - product_id
        - product_amount

    ProductBuyResponse:
      description: user product buy response
      properties:
        total_price:
          type: number
        products:
          type: array
          items:
            $ref: "#/components/schemas/ProductBuyRequest"

    ResetResponse:
      description: user reset response
      properties:
        message:
          type: string

    UserResponse:
      description: user register response
      properties:
        username:
          type: string
        deposit:
          type: number

    UserAuthResponse:
      description: user register response
      properties:
        token:
          type: string

paths:
  /users:
    get:
      tags:
        - User
      summary: List User
      operationId: listUsers
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
                format: int64
              description: Total Count
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags:
        - User
      summary: user register
      operationId: userRegister
      requestBody:
        description: user register body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          $ref: '#/components/responses/Error'

  /users/authenticate:
    post:
      tags:
        - User
      summary: user register
      operationId: userAuthenticate
      requestBody:
        description: user Authenticate
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAuth"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuthResponse'
        default:
          $ref: '#/components/responses/Error'

  /users/{id}:
    get:
      tags:
        - User
      summary: get User by Id
      operationId: getUserById
      parameters:
        - name: id
          description: Product ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          $ref: '#/components/responses/Error'
    put:
      tags:
        - User
      summary: user Update
      operationId: updateUser
      parameters:
        - name: id
          description: Product ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: user body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - User
      summary: user delete
      operationId: deleteUser
      parameters:
        - name: id
          description: user ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
        default:
          $ref: '#/components/responses/Error'

  /products/:
    get:
      tags:
        - Product
      summary: List products
      operationId: listProduct
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
                format: int64
              description: Total Count
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Product
      summary: Create new product.
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          $ref: '#/components/responses/Error'

  /products/{id}:
    get:
      tags:
        - Product
      summary: get product by Id
      operationId: getProductById
      parameters:
        - name: id
          description: Product ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          $ref: '#/components/responses/Error'
    put:
      tags:
        - Product
      summary: Update product.
      operationId: updateProduct
      parameters:
        - name: id
          description: Product ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - Product
      summary: Update product.
      operationId: deleteProduct
      parameters:
        - name: id
          description: product ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
        default:
          $ref: '#/components/responses/Error'

  /payment/deposit:
    post:
      tags:
        - Payment
      summary: user payment operations
      operationId: deposit
      requestBody:
        description: buyer deposit body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDeposit"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          $ref: '#/components/responses/Error'

  /payment/buy:
    post:
      tags:
        - Payment
      summary: user buy products
      operationId: buyProduct
      requestBody:
        description: product body
        content:
          application/json:
            schema:
              type: array
              items:
               $ref: "#/components/schemas/ProductBuyRequest"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductBuyResponse'
        default:
          $ref: '#/components/responses/Error'

  /payment/reset/deposit:
    post:
      tags:
        - Payment
      summary: user reset buy
      operationId: reset
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          $ref: '#/components/responses/Error'
