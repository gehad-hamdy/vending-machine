/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package flapkap.vendingmachine.api.v1;

import flapkap.vendingmachine.api.v1.resources.ErrorResource;
import flapkap.vendingmachine.api.v1.resources.UserResource;
import flapkap.vendingmachine.api.v1.resources.UserResponseResource;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-23T03:50:34.703457211+02:00[Africa/Cairo]")
@Validated
@Api(value = "users", description = "the users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /users/{id} : user delete
     *
     * @param id user ID (required)
     * @return OK (status code 200)
     *         or Error occurred (status code 200)
     */
    @ApiOperation(value = "user delete", nickname = "deleteUser", notes = "", tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 200, message = "Error occurred", response = ErrorResource.class) })
    @DeleteMapping(
        value = "/users/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> _deleteUser(@ApiParam(value = "user ID",required=true) @PathVariable("id") Integer id) {
        return deleteUser(id);
    }

    // Override this method
    default  ResponseEntity<Void> deleteUser(Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{id} : get User by Id
     *
     * @param id Product ID (required)
     * @return OK (status code 200)
     *         or Error occurred (status code 200)
     */
    @ApiOperation(value = "get User by Id", nickname = "getUserById", notes = "", response = UserResponseResource.class, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserResponseResource.class),
        @ApiResponse(code = 200, message = "Error occurred", response = ErrorResource.class) })
    @GetMapping(
        value = "/users/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserResponseResource> _getUserById(@ApiParam(value = "Product ID",required=true) @PathVariable("id") Integer id) {
        return getUserById(id);
    }

    // Override this method
    default  ResponseEntity<UserResponseResource> getUserById(Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"role\", \"deposit\" : 0.8008281904610115, \"userName\" : \"userName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users : List User
     *
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param limit The numbers of items to return. (optional, default to 20)
     * @return OK (status code 200)
     *         or Error occurred (status code 200)
     */
    @ApiOperation(value = "List User", nickname = "listUsers", notes = "", response = UserResponseResource.class, responseContainer = "List", tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserResponseResource.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Error occurred", response = ErrorResource.class) })
    @GetMapping(
        value = "/users",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserResponseResource>> _listUsers(@Min(0)@ApiParam(value = "The number of items to skip before starting to collect the result set.", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@Min(1) @Max(120) @ApiParam(value = "The numbers of items to return.", defaultValue = "20") @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit) {
        return listUsers(offset, limit);
    }

    // Override this method
    default  ResponseEntity<List<UserResponseResource>> listUsers(Integer offset, Integer limit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"role\", \"deposit\" : 0.8008281904610115, \"userName\" : \"userName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{id} : user Update
     *
     * @param id Product ID (required)
     * @param userResource user body (optional)
     * @return OK (status code 200)
     *         or Error occurred (status code 200)
     */
    @ApiOperation(value = "user Update", nickname = "updateUser", notes = "", response = UserResponseResource.class, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserResponseResource.class),
        @ApiResponse(code = 200, message = "Error occurred", response = ErrorResource.class) })
    @PutMapping(
        value = "/users/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserResponseResource> _updateUser(@ApiParam(value = "Product ID",required=true) @PathVariable("id") Integer id,@ApiParam(value = "user body"  )  @Valid @RequestBody(required = false) UserResource userResource) {
        return updateUser(id, userResource);
    }

    // Override this method
    default  ResponseEntity<UserResponseResource> updateUser(Integer id, UserResource userResource) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"role\", \"deposit\" : 0.8008281904610115, \"userName\" : \"userName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users : user register
     *
     * @param userResource dynamic section body (optional)
     * @return OK (status code 201)
     *         or Error occurred (status code 200)
     */
    @ApiOperation(value = "user register", nickname = "userRegister", notes = "", response = UserResponseResource.class, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK", response = UserResponseResource.class),
        @ApiResponse(code = 200, message = "Error occurred", response = ErrorResource.class) })
    @PostMapping(
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserResponseResource> _userRegister(@ApiParam(value = "dynamic section body"  )  @Valid @RequestBody(required = false) UserResource userResource) {
        return userRegister(userResource);
    }

    // Override this method
    default  ResponseEntity<UserResponseResource> userRegister(UserResource userResource) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"role\", \"deposit\" : 0.8008281904610115, \"userName\" : \"userName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
