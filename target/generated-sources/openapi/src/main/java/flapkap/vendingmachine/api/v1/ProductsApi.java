/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package flapkap.vendingmachine.api.v1;

import flapkap.vendingmachine.api.v1.resources.ErrorResource;
import flapkap.vendingmachine.api.v1.resources.ProductResource;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-23T03:50:34.703457211+02:00[Africa/Cairo]")
@Validated
@Api(value = "products", description = "the products API")
public interface ProductsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /products/ : Create new product.
     *
     * @param productResource  (optional)
     * @return OK (status code 201)
     *         or Error occurred (status code 200)
     */
    @ApiOperation(value = "Create new product.", nickname = "createProduct", notes = "", response = ProductResource.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK", response = ProductResource.class),
        @ApiResponse(code = 200, message = "Error occurred", response = ErrorResource.class) })
    @PostMapping(
        value = "/products/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ProductResource> _createProduct(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ProductResource productResource) {
        return createProduct(productResource);
    }

    // Override this method
    default  ResponseEntity<ProductResource> createProduct(ProductResource productResource) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"cost\" : 1, \"amount_available\" : 5, \"user_id\" : 6, \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /products/{id} : Update product.
     *
     * @param id product ID (required)
     * @return OK (status code 200)
     *         or Error occurred (status code 200)
     */
    @ApiOperation(value = "Update product.", nickname = "deleteProduct", notes = "", tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 200, message = "Error occurred", response = ErrorResource.class) })
    @DeleteMapping(
        value = "/products/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> _deleteProduct(@ApiParam(value = "product ID",required=true) @PathVariable("id") Integer id) {
        return deleteProduct(id);
    }

    // Override this method
    default  ResponseEntity<Void> deleteProduct(Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products/{id} : get product by Id
     *
     * @param id Product ID (required)
     * @return OK (status code 200)
     *         or Error occurred (status code 200)
     */
    @ApiOperation(value = "get product by Id", nickname = "getProductById", notes = "", response = ProductResource.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductResource.class),
        @ApiResponse(code = 200, message = "Error occurred", response = ErrorResource.class) })
    @GetMapping(
        value = "/products/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<ProductResource> _getProductById(@ApiParam(value = "Product ID",required=true) @PathVariable("id") Integer id) {
        return getProductById(id);
    }

    // Override this method
    default  ResponseEntity<ProductResource> getProductById(Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"cost\" : 1, \"amount_available\" : 5, \"user_id\" : 6, \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products/ : List products
     *
     * @param searchText  (optional)
     * @param offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param limit The numbers of items to return. (optional, default to 20)
     * @return OK (status code 200)
     *         or Error occurred (status code 200)
     */
    @ApiOperation(value = "List products", nickname = "listProduct", notes = "", response = ProductResource.class, responseContainer = "List", tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductResource.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Error occurred", response = ErrorResource.class) })
    @GetMapping(
        value = "/products/",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ProductResource>> _listProduct(@ApiParam(value = "") @Valid @RequestParam(value = "searchText", required = false) String searchText,@Min(0)@ApiParam(value = "The number of items to skip before starting to collect the result set.", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@Min(1) @Max(120) @ApiParam(value = "The numbers of items to return.", defaultValue = "20") @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit) {
        return listProduct(searchText, offset, limit);
    }

    // Override this method
    default  ResponseEntity<List<ProductResource>> listProduct(String searchText, Integer offset, Integer limit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"cost\" : 1, \"amount_available\" : 5, \"user_id\" : 6, \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /products/{id} : Update product.
     *
     * @param id Product ID (required)
     * @param productResource  (optional)
     * @return OK (status code 200)
     *         or Error occurred (status code 200)
     */
    @ApiOperation(value = "Update product.", nickname = "updateProduct", notes = "", response = ProductResource.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductResource.class),
        @ApiResponse(code = 200, message = "Error occurred", response = ErrorResource.class) })
    @PutMapping(
        value = "/products/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ProductResource> _updateProduct(@ApiParam(value = "Product ID",required=true) @PathVariable("id") Integer id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ProductResource productResource) {
        return updateProduct(id, productResource);
    }

    // Override this method
    default  ResponseEntity<ProductResource> updateProduct(Integer id, ProductResource productResource) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"cost\" : 1, \"amount_available\" : 5, \"user_id\" : 6, \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
